function sys = srtCWHModel(Ts, varargin)

% G Universal gravitational constant [m^3 / (kg * s^2)]
G = 6.673e-11;

% EARTH_RADIUS Equitorial Radius of the earth [km]
EARTH_RADIUS = 6378.1;

% EARTH_MASS Mass of the Earth [kg]
EARTH_MASS = 5.9472e24;

p = inputParser();
addOptional(p, 'Ts', 20);
% addParameter(p, 'SamplingTime', [], @(x) validateattributes(x, ...
    % {'numeric'}, {'scalar', 'positive', 'real'}));
addParameter(p, 'OrbitalRadius', EARTH_RADIUS);
addParameter(p, 'CelestialBodyMass', EARTH_MASS);
addParameter(p, 'DeputyMass', 300);

addParameter(p, 'Dimensionality', 6);

addParameter(p, 'InputSpace', ...
    Polyhedron('lb', -0.1*ones(2, 1), 'ub',  0.1*ones(2, 1)));

addParameter(p, 'Disturbance', ...
    srt.disturbances.Gaussian(zeros(4, 1), diag([1E-4, 1E-4, 5E-8, 5E-8])));

addParameter(p, 'DisturbanceMatrix', []);

parse(p, Ts, varargin{:});

InputSpace = p.Results.InputSpace;

Disturbance = p.Results.Disturbance;
DisturbanceMatrix = p.Results.DisturbanceMatrix;

if isempty(DisturbanceMatrix)
    DisturbanceMatrix = eye(p.Results.Dimensionality);
end

Mu = G*p.Results.CelestialBodyMass/(1000^3);
n = sqrt(Mu/(p.Results.OrbitalRadius^3));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

eAt = @(t) [
   4 - 3 * cos(n * t), ...
      0, ...
      0, ...
      (1/n) * sin(n * t), ...
      (2/n) * (1 - cos(n * t)), ...
      0; ...
   6 * (sin(n * t) - n * t), ...
       1, ...
       0, ...
       -(2/n) * (1 - cos(n * t)), ...
       (1/n) * (4*sin(n * t) - 3*n * t), ...
       0; ...
   0, ...
       0, ...
       cos(n * t), ...
       0, ...
       0, ...
       (1/n) * sin(n * t); ...
   3 * n * sin(n * t), ...
       0, ...
       0, ...
       cos(n * t), ...
       2 * sin(n * t), ...
       0; ...
   -6 * n * (1 - cos(n * t)), ...
       0, ...
       0, ...
       -2 * sin(n * t), ...
       4 * cos(n * t) - 3, ...
       0; ...
   0, ...
       0, ...
       -n * sin(n * t), ...
       0, ...
       0, ...
       cos(n * t);
];

% Discrete-time state matrix is Phi(T_s) for sampling time T_s since the
% system is time-invariant
A = eAt(Ts);

% Continuous-time input matrix B_{cts}
B_cts = 1 / p.Results.DeputyMass * [zeros(3); eye(3)];

% Discrete-time input matrix is (\int_0^T e^{A_{cts}\tau} d\tau) B_cts
B = integral(eAt, 0, Ts, 'ArrayValued', true) * B_cts;

if p.Results.Dimensionality == 4
    % reduce matrices
    A = A([1:2, 4:5], [1:2, 4:5]);
    B = B([1:2, 4:5], 1:2);
end

sys = srt.systems.LtiSystem(A, B, DisturbanceMatrix, Disturbance, ...
        'InputSpace', InputSpace);

end
